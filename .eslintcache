[{"/Users/manpreet/Desktop/react-burger-stacker/src/components/BurgerPane.js":"1","/Users/manpreet/Desktop/react-burger-stacker/src/components/IngredientList.js":"2","/Users/manpreet/Desktop/react-burger-stacker/src/App.js":"3","/Users/manpreet/Desktop/react-burger-stacker/src/components/Ingredient.js":"4","/Users/manpreet/Desktop/react-burger-stacker/src/components/BurgerStack.js":"5"},{"size":467,"mtime":1607059582080,"results":"6","hashOfConfig":"7"},{"size":1964,"mtime":1607056417902,"results":"8","hashOfConfig":"7"},{"size":2017,"mtime":1607059567009,"results":"9","hashOfConfig":"7"},{"size":648,"mtime":1607056171015,"results":"10","hashOfConfig":"7"},{"size":683,"mtime":1607059589201,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1aotzzd",{"filePath":"14","messages":"15","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/manpreet/Desktop/react-burger-stacker/src/components/BurgerPane.js",["24"],"/Users/manpreet/Desktop/react-burger-stacker/src/components/IngredientList.js",["25"],"import React, { useState } from 'react';\n// import BurgerPane from './components/BurgerPane'\nimport Ingredient from './Ingredient'\n//PROPS WAY (this is grabbing the item array that was created in the parent (app.js))\n// const IngredientList = (props) =>{\n//     {items.map((item, index)=>{\n//         console.log(item)\n//         //this is now going to render the ingredient component. The key is automatically generated by using the map function.\n//         // to get all the info from the item array instead of having to list everything, you can make it\n//         //equal itself. That will pass the entire object.\n//        return (\n//        <div> \n//            <Ingredient key = {index} name={item.name} color={item.color} /> \n//        </div>\n//     )})}\n// }\nconst IngredientList = (props) =>{\n    return (\n        <div style={{border: '3px solid red', width:'30%'}}>\n           {/* {props.name} {props.color} {props.itemIndex} <button>Add</button> */}\n           <Ingredient items={props.items} addItem={props.addItem} />\n\n       </div>\n    )}\n\nexport default IngredientList\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// import React, { useState } from 'react';\n\n\n// //import BurgerPane from \"./BurgerPane\";\n// //import Ingredient from './Ingredient'\n\n// //components Import\n// //this is grabbing the item array that was created in the parent app.js \n// // const IngredientList = ({props}) => {\n    \n// //         //this is now going to render infredient component. the key is automatically is generedted using map function\n// //         //get all info from the item array instead of having to list everything, you can make it \n// //         //equal itself. This will pass entire object  \n// //        return(\n// //            <div> {props.name} \n// //            </div>\n           \n// //        )}\n\n\n// const IngredientList = (props) =>{\n//     return (\n//         <div>\n//            {props.name}\n//        </div>\n//     )}\n\n   \n//   export default IngredientList;","/Users/manpreet/Desktop/react-burger-stacker/src/App.js",["26"],"import React, { useState } from 'react';\nimport BurgerPane from './components/BurgerPane'\n// import BurgerStack from './components/BurgerStack'\nimport IngredientList from './components/IngredientList'\nimport \"./css/App.css\";\n//we want to render the ingredients as soon as the user loads the page, thats why the array is inside app.js. which is the parent. \nconst App = () => {\n    const [items, setItems] = useState([ \n        { name: \"Kaiser Bun\", color: \"saddlebrown\" },\n        { name: \"Sesame Bun\", color: \"sandybrown\" },\n        { name: \"Gluten Free Bun\", color: \"peru\" },\n        { name: \"Lettuce Wrap\", color: \"olivedrab\" },\n        { name: \"Beef Patty\", color: \"#3F250B\" },\n        { name: \"Soy Patty\", color: \"#3F250B\" },\n        { name: \"Black Bean Patty\", color: \"#3F250B\" },\n        { name: \"Chicken Patty\", color: \"burlywood\" },\n        { name: \"Lettuce\", color: \"lawngreen\" },\n        { name: \"Tomato\", color: \"tomato\" },\n        { name: \"Bacon\", color: \"maroon\" },\n        { name: \"Onion\", color: \"lightyellow\" }, \n    ])\n    const [selectedIngredients, setselectedIngredients] = useState([\n\n    ])\n\n      \n    \n      const addItem = (event, items) => {\n        event.preventDefault()\n        console.log(selectedIngredients)\n        console.log(items)\n        setselectedIngredients([items, ...selectedIngredients])\n\n        }\n\n      const clearselectedIngredients = () =>{\n        setselectedIngredients([])\n      }\n\n\n\n  return (\n    // <div style={{flexDirection: \"row\", jutifyContent: 'flex-start'}}> \n    //   <h1>Ingredient List: </h1>\n    //   {items.map((item,  index)=>(\n    //     <IngredientList  name={item.name} color={item.color} itemIndex={index} />  \n    //     ))}\n    //     <BurgerPane />  \n    // </div>\n    <div>\n      <div>\n      <IngredientList   addItem={addItem} items={items}/>  \n      </div>\n      <div>\n        <BurgerPane selectedIngredients={selectedIngredients} clearselectedIngredients ={clearselectedIngredients}/>\n      </div>\n    </div>\n    )\n  }\nexport default App;\n","/Users/manpreet/Desktop/react-burger-stacker/src/components/Ingredient.js",["27","28"],"/Users/manpreet/Desktop/react-burger-stacker/src/components/BurgerStack.js",["29"],{"ruleId":"30","severity":1,"message":"31","line":1,"column":16,"nodeType":"32","messageId":"33","endLine":1,"endColumn":24},{"ruleId":"30","severity":1,"message":"31","line":1,"column":17,"nodeType":"32","messageId":"33","endLine":1,"endColumn":25},{"ruleId":"30","severity":1,"message":"34","line":8,"column":19,"nodeType":"32","messageId":"33","endLine":8,"endColumn":27},{"ruleId":"30","severity":1,"message":"31","line":1,"column":16,"nodeType":"32","messageId":"33","endLine":1,"endColumn":24},{"ruleId":"35","severity":1,"message":"36","line":15,"column":22,"nodeType":"37","messageId":"38","endLine":15,"endColumn":53},{"ruleId":"35","severity":1,"message":"36","line":21,"column":41,"nodeType":"37","messageId":"38","endLine":21,"endColumn":81},"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'setItems' is assigned a value but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock"]